// Package mcu provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package mcu

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ComputerType.
const (
	Chip   ComputerType = "chip"
	Keyb   ComputerType = "keyb"
	Mcu    ComputerType = "mcu"
	Pc     ComputerType = "pc"
	Server ComputerType = "server"
	Skull  ComputerType = "skull"
)

// Computer defines model for Computer.
type Computer struct {
	Id     int    `json:"id"`
	Ip     string `json:"ip"`
	Name   string `json:"name"`
	Online bool   `json:"online"`

	// Type Type of computer or device
	Type ComputerType `json:"type"`

	// Uptime Uptime in human-readable format
	Uptime string `json:"uptime"`
}

// ComputerType Type of computer or device
type ComputerType string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/2yTwY7bIBCGXwVNe6SOna2q1rdVDlWkSs2hPVV7IHiczC4MFHBUK8q7V+DEu1b2YjDM",
	"P3z8zJxBO+sdI6cI7RmiPqJVZbpx1g8JQ5774DyGRFh2qMtf/KesNwhtIyGNHqEF4oQHDHCRQH4RA823",
	"ddV8+Vo1VVODhN4Fq1KW+NNnmBPEFIgPWc/K4jLDz74njWK3eS/csSFeClIYcI7cO2dQcQ6dVs7QYdSB",
	"fCLH0MKv0aNwvdDXWwsXRIcn0ggSkAcL7R/wGiToI3mQYPUAEl5w3IOEiOGEIU9eBmPgSb7hLqI74MEn",
	"su9w/C7rglgcB6v4U0DVqb1BcXXsbeaHTqyP98kvEgL+HShgl6Gpu4VcXS2PMxPM3j3Nidz+GXWCS85E",
	"3Lt7ysfdNgMJq1gdiA9CCUMxTQYyo07YvVo5+RirzEGpoN+KS2z5hJxcGMXjbgsSThjidEZT1VVd3tYj",
	"K0/5wlVdPYAEr9KxVOLqdkb5O2DKQy5VlUG3HbTwHdNmDsrORO84ToW8rus8aMcJuWiV94Z0Ua+eY+a4",
	"9UQp/IS2CD8G7KGFD6vX7lldW2c1981ca6BCUOPk59LHH7NpN8IcEwdrVRgneKGMWexfLv8DAAD//6Yl",
	"pm+1AwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
